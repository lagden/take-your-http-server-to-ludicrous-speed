doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Take your HTTP server to Ludicrous Speed

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 Take your HTTP server to
        img(src="./images/ludicrous.gif")
        br
        h3 by&nbsp;
          a(href="http://twitter.com/matteocollina") @matteocollina

        p.copyright.
          Ludicrous speed is from Spaceballs

      section(data-bespoke-backdrop='spaceballs').trans

      section(data-bespoke-backdrop='hole').trans
        h2(style="color: white; margin-bottom: -50%") Down the rabbit hole of performance optimizations

      section
        h3 2015
        a(href="https://www.youtube.com/watch?v=_0W_822Dijg")
          img(src="images/reaching-ludicrous-speed.png" style="width: 90%")

      section
        h3 2016
        h2 Tools
        ul.bullet
          li
            a(href="http://npm.im/autocannon") autocannon
          li
            a(href="http://npm.im/0x") 0x

      section
        img(src='images/autocannon.png', style='width:100%;margin-bottom:5%;margin-top:-5%')
        h3 HTTP load tester
        h3 Trival cross platform installation
        h3 Generates the same load as alternatives in C

      section
        img(src='images/0x.png', style='height:15%;margin-bottom:5%;margin-top:-5%')
        img(src='images/0x-demo.gif', style='height:85%')

      section
        h2(style='font-size: 3.125em') 0x + autocannon = ðŸ‘Œ

      section
        h3 2016
        img(src="./images/pino.png" style="width: 90%")
        ul.bullet
          li ðŸŒ² super fast, all natural json logger ðŸŒ²
          li Up to 17x faster than alternatives

      section
        h3 2017
        h2 Another Web Framework?

      section
        h2 Express
        pre
          code.language-javascript.
            'use strict'

            var express = require('express')
            var app = express()

            app.get('/', function (req, res) {
              res.send({ hello: 'world' })
            })

            app.listen(3000)

      section
        h2 Node Core
        pre
          code.language-javascript.
            'use strict'

            var server = require('http').createServer(handle)

            server.listen(3000)

            function handle (req, res) {
              res.end(JSON.stringify({ hello: 'world' }))
            }

      section
        img(src="images/core-vs-express.png" style="height: 100%")

      section
        a(href="flamegraph-express.html" target="blank")
          img(src="images/flamegraph-express.png" style="width: 90%")

      section
        a(href="flamegraph-core.html" target="blank")
          img(src="images/flamegraph-bare.png" style="width: 90%")

      section
        h2 How to get fast?

      section
        h2 How node works
        br
        img(src="images/event-loop.png" style="height: 80%")

      section
        h2 How to get fast
        p
          b fast
          | &nbsp;means we can do more I/O
        ul.bullet
          li get an I/O event
          li process the event
          li release the CPU
          li
            b as fast as possible

      section(data-bespoke-backdrop='cheetah').trans
        h2 Achieving ZERO overhead

      section
        img(src="images/fastify.png" style="width: 90%")

      section
        pre
          code.language-javascript.
            'use strict'
            const fastify = require('fastify')()

            fastify.get('/', function (req, reply) {
              reply.send({ hello: 'world' })
            }).listen(3000)

      section
        pre
          code.language-javascript.
            'use strict'
            const fastify = require('fastify')()
            const opts = { schema: { response: { 200: {
              type: 'object',
              properties: {
                hello: {
                  type: 'string'
                }
              }
            } } } }
            fastify.get('/', opts, function (req, reply) {
              reply.send({ hello: 'world' })
            }).listen(3000)

      section
        img(src="images/core-vs-express-vs-fastify.png" style="height: 100%")

      section
        a(href="flamegraph-fastify-simple.html" target="blank")
          img(src="images/flamegraph-fastify-simple.png" style="width: 90%")

      section
        h2
          em Fastify
          | &nbsp;features
        ul.bullet
          li decorators
          li lifecycle hooks
          li rich plugin system
          li middleware support
          li validations

      section
        h2 decorators
        pre
          code.language-javascript.
            fastify.decorateReply('test', 'world')

            fastify.get('/yes', (req, reply) => {
              reply.send({ hello: reply.test })
            })

      section
        h2 Lifecycle hooks
        pre
          code.language-javascript.
            fastify.addHook('onRequest', (req, res, next) => {
              /* some code */
              next(new Error('some error'), 400)
            })

      section
        h2 plugins
        ul.bullet
          li fastify-plugin injects any decorator in the current level
          li otherwise, only plugins registered at child will have access
          li hooks follows the same mechanism
          li
            a(href="https://github.com/mcollina/avvio") https://github.com/mcollina/avvio

      section
        pre
          code.language-javascript.
            const fastify = require('fastify')()
            const helmet = require('fastify-helmet')

            fastify.register(helmet)

            fastify.listen(3000)

      section
        h2 fastify-plugin
        pre
          code.language-javascript.
            const fp = require('fastify-plugin')

            module.exports = fp(function (fastify, opts, next) {
              next()
            })

      section
        h2 without fastify-plugin
        pre
          code.language-javascript.
            module.exports = function (fastify, opts, next) {
              next()
            }

      section
        pre
          code.language-javascript.
            fastify.register((instance, opts, next) => {
              instance.decorateReply('test', 'world')
              instance.get('/yes', (req, reply) => {
                reply.send({ hello: reply.test })
              })
              next()
            })

            fastify.get('/no', (req, reply) => {
              reply.send({ hello: reply.test }) // test is undefined
            })

      section
        pre
          code.language-javascript.
            const fp = require('fastify-plugin')
            fastify.register(fp(instance, opts, next) => {
              instance.decorateReply('test', 'world')
              instance.get('/yes', (req, reply) => {
                reply.send({ hello: reply.test })
              })
              next()
            })

            fastify.get('/no', (req, reply) => {
              reply.send({ hello: reply.test }) // test is 'world'
            })

      section
        h2 middlewares
        h3 are not restricted by plugins
        pre
          code.language-javascript.
            fastify.use(require('cors')())

      section
        h2 JSON-schema validation
        pre
          code.language-javascript.
            const schema = {
              body: {
                type: 'object',
                properties: {
                  someKey: { type: 'string' },
                  someOtherKey: { type: 'number' }
                }
              },
              querystring: { /* ... */ },
              params: { /* ... */ }
            }

      section
        h2 JSON-schema validation
        pre
          code.language-javascript.
            fastify.post('/data', schema, (request, reply) => {
              /* ... */
            })

      section(data-bespoke-backdrop='path').trans
        h2(style="color: white") The path to fast

      section
        div.bullet
          h3.bullet preinitialize data structures
          h3.bullet JSON.stringify
          h3.bullet routing
          h3.bullet middlewares
          h3.bullet decorators and hooks

      section
        h2 preinitialize data structures

      section
        img(src="images/build-run.png" style="width: 100%")

      section
        h2 routing

      section
        h2 find-my-way
        ul.bullet
          li radix-tree router
          li different API
          li closure free
          li extremely optimized

      section
        pre
          code.language-javascript.
            const http = require('http')
            const router = require('find-my-way')()

            router.on('GET', '/', (req, res, params) => {
              res.end('{"hello":"world"}')
            })

            http.createServer((req, res) => {
              router.lookup(req, res)
            }).listen(3000)

      section
        h2 find-my-way
        img(src="images/find-my-way-bench.png" style="height: 100%")

      section
        h2 The problem with JSON.stringify
        ul.bullet
          li recursive function, it cannot be optimized by V8
          li generic code, cannot be type specific

      section
        h2 fast-json-stringify
        ul.bullet
          li schema-based JSON rendering
          li generates code based on the schema
          li new Function(), but it is safe

      section
        img(src="images/fast-json-stringify.png" style="height: 100%")

      section
        h2 middlewares

      section
        h2 helmet middlewares
        img(src="images/middleware-express-vs-fastify.png" style="height: 100%")

      section
        a(href="flamegraph-express-helmet.html" target="blank")
          img(src="images/flamegraph-express-helmet.png" style="width: 90%")

      section
        // https://github.com/expressjs/express/blob/9722202df964bfbfc0f579e4baeb5a4e1b43b344/lib/router/route.js#L98
        img(src="images/express-closure-stack.png" style="height: 90%")

      section
        a(href="flamegraph-fastify-helmet.html" target="blank")
          img(src="images/flamegraph-fastify-helmet.png" style="width: 90%")

      section
        h2 A tale of two compilers

      section
        img(src="images/Optimization.png" style="width: 90%")

      section
        img(src="images/Deoptimization.png" style="width: 90%")

      section
        h2 The problem with closures

        pre
          code.language-javascript.
            function process (bigdata, cb) {
              remoteCall(bigdata, function (err, something) {
                storeSomething(something, function (err, res) {
                  // this function is short-lived and hard to optimize
                  // bigdata is still in scope!
                  cb(null, res * 2)
                })
              })
            }

      section
        h2 Avoid nested closures 1/2

        pre
          code.language-javascript.
            function process (bigdata, cb) {
              remoteCall(bigdata, function (err, something) {
                // bigdata exits scope here
                callStoreSomething(something, cb)
              })
            }

      section
        h2 Avoid nested closures 2/2

        pre
          code.language-javascript.
            function callStoreSomething(something, cb) {
              /* this function can be optimized! */
              storeSomething(something, function (err, res) {
                cb(null, res * 2)
              })
            }

      section
        h2 no closure at all!
        a(href="https://github.com/mcollina/reusify") https://github.com/mcollina/reusify
        a(href="https://github.com/fastify/middie") https://github.com/fastify/middie

        pre
          code.language-javascript.
            function run (req, res) {
              if (!middlewares.length) complete(null, req, res)
              else {
                const holder = pool.get()
                holder.req = req; holder.res = res
                holder.url = pathMatch(req.url)
                holder.done()
              }
            }

      section
        h2 avoiding closures
        ul.bullet
          li use top-level function
          li encapsulate state in Objects
          li use prototypical inheritance to extend behavior
          li use reusify when it is not possible

      section
        h2 validators

      section
        img(src="./images/validators.png" styles="width: 100%")

      section
        img(src="./images/validators-errors.png" styles="width: 100%")

      section
        ul.bullet
          li ajv is the best choice for speed and correctness
          li because we use a standard we could switch over time!
          li
            a(href="https://github.com/ebdrup/json-schema-benchmark") https://github.com/ebdrup/json-schema-benchmark

      section
        h2 decorators
        ul.bullet
          li decorate the server, the request and reply
          li implemented using prototypical inheritance
          li no extra cost at runtime

      section
        h2 lifecycle hooks
        ul.bullet
          li attached to the server, the request and reply
          li implemented using prototypical inheritance
          li no extra cost at runtime

      section
        img(src="images/fastify.png" style="width: 90%")

      section
        h3 Most code does not need to go
        img(src="./images/ludicrous.gif")

      section
        h2 This presentation
        ul.bullet
          li
            a(href="https://mcollina.github.io/take-your-http-server-to-ludicrous-speed").
              https://mcollina.github.io/take-your-http-server-to-ludicrous-speed
          li
            a(href="https://github.com/mcollina/take-your-http-server-to-ludicrous-speed").
              https://github.com/mcollina/take-your-http-server-to-ludicrous-speed

      section.full-imgs
        img(src='images/me.png')
        h3
          a(href='http://github.com/mcollina') http://github.com/mcollina

      section
        h1 Thanks!
        a(href="http://nearform.com" style="width: 20%")
          img(src="./images/nearform.svg")
        br
        p We are hiring JavaScript developers
        br
        h3 <a href="mailto:matteo.collina@nearform.com">matteo.collina@nearform.com</a>
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a> on Twitter
        h3 <a href="http://www.nearform.com">www.nearform.com</a>

    script(src='build/build.js')
